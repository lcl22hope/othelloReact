{"version":3,"sources":["main/OthelloPattern.js","main/OthelloGame.js","main/OthelloView.jsx","App.js","serviceWorker.js","index.js"],"names":["OthelloPattern","board","Object","classCallCheck","this","x","y","color","checkOnly","arguments","length","undefined","ox","oy","canMove","_i","_directions","direction","directionCanMove","hasOpposite","console","log","move","temp","flat","blackCount","filter","a","whiteCount","concat","map","line","slice","item","OthelloGame","patterns","colors","pattern","clone","checkPass","showWin","push","showCurrent","pop","OthelloView","props","_this","possibleConstructorReturn","getPrototypeOf","call","game","state","refresh","revert","reset","setState","result","constructCell","react_default","createElement","key","pieceValue","cellClass","className","onClick","bind","id","constructBoard","es_button","type","regret","React","Component","App","main_OthelloView","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc4710c8.chunk.js","sourcesContent":["class OthelloPattern {\n    constructor(board) {\n        this.board = board || [\n            [0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 2, 1, 0, 0, 0],\n            [0, 0, 0, 1, 2, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0],\n        ]; \n    }\n\n    move(x, y, color, checkOnly = false,) {\n        let ox = x, oy = y;\n        let canMove = false;\n\n        if (this.board[x][y] !== 0) \n            return false;\n\n        let directions = [\n            [-1, -1],//左上\n            [-1,  0],//左\n            [-1,  1],//左下\n            [ 0,  1],//下\n            [ 0, -1],//上\n            [ 1,  1],//右下\n            [ 1, -1],//右上\n            [ 1,  0],//右\n        ];\n\n        for (let direction of directions) {\n            let directionCanMove = false;\n            let hasOpposite = false;\n\n            x = ox;\n            y = oy;\n\n            while(true) { \n                x += direction[0];\n                y += direction[1];\n                if (x < 0 || x >= 8 || y < 0 || y >= 8) //判断越界\n                    break;\n\n                if (this.board[x][y] === 3 - color) { //遇到不同色\n                    hasOpposite = true;\n                }\n                if (this.board[x][y] === color) { //遇到同色\n                    if (hasOpposite) \n                        directionCanMove = true;\n                    break;\n                }\n                if (this.board[x][y] === 0) { //遇到边界\n                    break;\n                }\n            }\n            if (directionCanMove && !checkOnly) {\n                while(true) { //吃子\n                    x -= direction[0];\n                    y -= direction[1];\n                    if (x === ox && y === oy) {\n                        break;\n                    }\n                    this.board[x][y] = color;\n                }\n            }\n            canMove = canMove || directionCanMove;\n        }   \n\n        if (canMove && !checkOnly) {\n            this.board[ox][oy] = color;\n            color = 3 - color;\n            console.log(\"next color: \", color === 1 ? \"黑\" : \"白\");\n\n        }\n        return canMove;\n    }        \n\n    checkPass(color) {\n        for(let x = 0; x < 8; x++) {\n            for (let y = 0; y < 8; y++) {\n                if (this.move(x, y, color, true)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    showWin() {\n        let temp = this.board.flat();\n        let blackCount = temp.filter(a => a === 1).length;\n        let whiteCount = temp.filter(a => a === 2).length;\n        console.log(`game over, black:${blackCount}, white:${whiteCount}, ${blackCount > whiteCount ? \"Black Win\" : \"White Win\"}`);\n    }\n\n    showCurrent() {\n        let temp = this.board.flat();\n        let blackCount = temp.filter(a => a === 1).length;\n        let whiteCount = temp.filter(a => a === 2).length;\n        console.log(\"white: \", whiteCount, \"\\nblack: \", blackCount);\n    }\n\n    clone() {\n        return new OthelloPattern(this.board.map(line => line.slice()));\n    }\n\n    spaces() {\n        return this.board.flat().filter(item => item === 0).length;\n    }\n}\nexport default OthelloPattern;\n\n","import OthelloPattern from \"./OthelloPattern.js\";\n\nclass OthelloGame {\n    constructor() {\n        this.patterns = [new OthelloPattern()];\n        this.colors = [1];\n    }\n\n    get pattern() {\n        return this.patterns[this.patterns.length - 1];\n    }\n\n    get color() {\n        return this.colors[this.colors.length - 1];\n    }\n\n    move(x, y) {\n        let pattern = this.pattern.clone();\n        let color = this.color;\n\n        if(pattern.move(x, y, color)) {\n            color = 3 - color;\n            if (pattern.checkPass(color)) {\n                console.log(\"passed\");\n                color = 3 - color;\n                if (pattern.checkPass(color)) {\n                    //game over\n                    pattern.showWin();\n                }\n            }\n            this.patterns.push(pattern);\n            this.colors.push(color);\n            pattern.showCurrent();\n        }\n    }\n\n    revert() {\n        if (this.patterns.length > 1) {\n            this.patterns.pop();\n            this.colors.pop();\n        }\n    }\n\n    reset() {\n        this.patterns = [new OthelloPattern()];\n        this.colors = [1];\n    }\n}\n\nexport default OthelloGame;\n","\nimport React from 'react';\nimport {Button} from 'antd';\nimport \"../App.css\";\n\nclass OthelloView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.game = props.game;\n        this.state = {\n            refresh: false\n        }\n    }\n\n    regret() {\n        this.props.game.revert();\n        this.refresh();\n    }\n\n    reset() {\n        this.props.game.reset();\n        this.refresh();\n    }\n\n    move(x, y) {\n        console.log(this.props.game);\n        this.props.game.move(x, y);\n        this.refresh();\n    }\n\n    refresh() {\n        this.setState({\n            refresh: !this.state.refresh\n        });\n    }\n\n    constructBoard() {\n        let result = [];\n        for (let x = 0; x < 8; x++) {\n            for (let y = 0; y < 8; y++) {\n                result.push(this.constructCell(x, y));\n            }\n            result.push(<br key={`br_${x}`}/>);\n        }\n        return result;\n    }\n\n    constructCell(x, y) {\n        let pieceValue = this.game.pattern.board[x][y];\n        let cellClass = `cell ${pieceValue === 1 ? \"black\" : \"\"} ${pieceValue === 2 ? \"white\" : \"\"} `;\n        let canMove = this.game.pattern.move(x, y, this.game.color, true);\n        cellClass += `${canMove ? \"step\" : \"\"} ${canMove && this.game.color === 1 ? \"black\": \"\"} ${canMove && this.game.color === 2 ? \"white\": \"\"}`;\n        return (\n            <div className={cellClass} onClick={this.move.bind(this, x, y)} key={`cell_${x*8+y}`}/>\n        )\n    }\n\n    render() {\n        return (\n            <div id=\"container\">\n                {this.constructBoard()}\n                <Button type=\"default\" onClick={this.regret.bind(this)}>{\"悔棋\"}</Button>\n                <Button type=\"default\" onClick={this.reset.bind(this)}>{\"重新开始\"}</Button>\n            </div>\n\n        )\n    }\n}\n\nexport default OthelloView;","import React from 'react';\nimport OthelloGame from \"./main/OthelloGame.js\";\nimport OthelloView from \"./main/OthelloView.jsx\";\nimport './App.css';\n\nfunction App() {\n  let game = new OthelloGame();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <OthelloView game={game}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}